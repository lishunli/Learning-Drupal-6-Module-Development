# 第一章 Drupal 模块简介 #

Drupal (发音为 Droo-puhl)是一种基于web的内容管理系统（CMS）。与其它CMS 框架类似，Drupal提供了模块接口，使开发者可以定制和扩展CMS系统。不过有一点使 Drupal 区别于其它 web CMS 平台，它的模块系统很强大很灵活。

这个模块系统是本书的重点。在本章中，我们讲述 Drupal 的模块，以及如何把它们装入 Drupal 框架。特别地，我们将学习下列内容：

* Drupal 的结构
* 模块与主题简介
* 从开发者的角度概览 Drupal的重要概念和 API，例如节点、菜单和表单
* 使用工具进行模块开发

## Drupal 的体系结构 ##

一言以蔽之，Drupal 是一个基于 web 的内容管理系统，它是用 PHP 编写的，使用关系型数据库（通常是 MySQL）存储数据。

PHP 表示 PHP 超文本处理器，是一种用于web应用开发的高级语言。PHP 具有很强的灵活性，既支持过程化的开发方法，也支持面向对象（OO）的软件开发方法。

Drupal 的核心是用过程化风格的 PHP 小心谨慎地写成的。代码遵循严格的约定，每个文件和函数都在源码中有文档说明。API 通常很小，保持简洁和实用。这些因素使得 Drupal 的源码与那些平庸的 PHP 代码相比更易于阅读。但是极度简洁的代码常常使人误解，其实，对于这个健壮的内容管理系统，使用简单的工具和模块组合能够产生极为复杂的功能。

提示：为什么 Drupal 不是面向对象的？这个问题常常被问到。回答包括几个方面，其中一个原因很简单，那就是当这个项目起步的时候，PHP 还美有面向对象的特性。不过，虽然看起 来缺少了构造函数和类，但 Drupal 采用了很多 OO 的原则：封装、继承、多态等。OO 程序员很快就能自如使用 Drupal 的体系结构。

一个简化的 Drupal 技术层次图如下所示：

![插图 1-1](https://raw.github.com/playts/Learning-Drupal-6-Module-Development/master/images/1-1.jpg)

插图 1-1

中间是 Drupal 的核心，它是一组文件，由自举代码和重要的常用函数库组成。Drupal 核心函数库是粘结层，把 Drupal 的模块粘结在一起。它们提供的服务包括数据连接与管理（上图中由连到数据库的虚线表示）以及本书将要详细讲解的高度可定制的钩子框架。其它标准特性包括邮 件与图像库、国际化、Unicode 支持也包含在 Drupal 核心库之中。

提示：很多必备的系统模块被称为 Drupal 的核心模块。在上图中，我本应把它们与其它模块并列表示，因为它们是必不可少的模块。

但是尽管这些文件很重要，仍有理由保持上图中的 Drupal 核心库部分相对精简。尽管这些库提供了强大的特性集，但其实 Drupal 真正强大之处在于它的模块化体系结构。

### 模块体系结构 ###

模块究竟是什么？它的作用又是什么呢？

第二个问题比较容易回答：Drupal 模块机制的设计目标是为扩充 Drupal 的功能提供统一的方法。模块的目的是为了扩充 Drupal 的功能。这个回答使我们更接近第一个问题的答案。一个模块是若干 PHP 代码及支持文件，它使用 Drupal 的 API 和体系结构把新的功能组件集成在 Druapl 的框架内。

因此，本书的目的就是解释如何编写这些代码。上面的定义意味着我们需要熟悉 Drupal 的框架和 API 。这正是我们所要做的贯穿本书的工作。让我们开始吧，先看看模块体系结构。

组成模块的文件被组织在一起，放在 Drupal 目录结构中的特定位置。那就是说，当 Drupal 安装在服务器的文件系统中时，Druapl 的模块必须位于几个特定的位置（我们下一章中了解这些位置）。

当 Drupal需要了解模块的信息时，它将查看这些预定的位置。每个模块都放在自己的目录中，至少有两个文件——一个描述模块的内容，另一个或多个包含代码和其它支撑材料。（下一章，我们构建自己的模块时，将创建这两类文件。）

在一个模块能发挥作用之前，必须由Drupal的管理员启用它。不过，一旦模块启用，它将按需装载，Drupal 根据需要把请求（request）交给模块处理。

#### 核心模块 ####

有些模块太重要了，删除它们将导致 Drupal 正常运行必需的特性失效。同样，有些模块提供的特性，是系统的方方面面都需要的。这两类的模块，都由 Drupal 开发团队维护，它们统称为 Drupal 核心模块。这些模块是 Drupal 发行版中默认包含的，Drupal 社区对它们的维护和开发非常活跃。

它们在维持 Drupal 正常运作中的作用很重要，除此之外，Drupal 核心模块与其它模块在体系结构方面区别不大。它们遵循同样的准则并使用同样的 API。这些模块并没有什么特别神秘之处。

提示：在 Drupal 的管理页面上，导航到 Administer | Site building | Modules，在此你可以看到核心模块的列表。最重要的是5个必备模块Block, Filter, Node, System, 和 User。不能卸载或停用它们。其它模块，比如 Menu, Locale, 和 Taxonomy 提供了基本服务，甚至在基本的安装过程中也需要这些服务。

![插图 1-2](https://raw.github.com/playts/Learning-Drupal-6-Module-Development/master/images/1-2.jpg)

插图 1-2

在 Drupal 体系结构的皇冠上有一颗明珠，那就是模块之间能很容易地交互。使用钩子体系结构，模块提供的服务可以被编织在一起，不需要大量的代码就可以创建出健壮的特性。

在本书的课程中，我们常常会用到 Drupal 核心模块提供的API和设施。不过，我们没有用哪一章研究已有的 Drupal 代码。我们使用这些模块，但我们并不深究特定核心模块的实现细节。在本书中，我们的重点是编写自己的模块。

那就是说，核心模块的代码的确是如何编写 Drupal 代码的最佳参考资料。如果阅读本书的同时，你能通读其中的部分代码将会获益匪浅。

#### 钩子 ####

Drupal是如何知道何时调用一个模块处理特定请求的呢？

这是通过 Drupal 的钩子机制实现的，本书中我们将详细介绍这种机制。做为开头，现在我们简要介绍一下钩子是如何工作的。

当 Drupal 处理来自用户的请求时，是通过一系列的步骤进行的。例如，Drupal 核心首先进行应用程序自举，定义关键的变量和常用函数。接下来，它装载关键的库、主题和模块。再往后，它继续处理请求，把请求的 URI 映射到恰当的处理代码，等等。然后，把一个主题应用在数据上，对信息进行格式化以便输出。最后，它把输出结果返回给用户的浏览器。

在这一步步的处理过程中的预定时刻，Drupal 执行钩子函数。这是什么意思呢？简短地说，意思是，Drupal 检查当前起作用的某些或全部模块，查找符合特定预定义模式的函数。有些人把这个过程与事件处理模型中常用的“回调”函数联系起来。它与此相似，但更具动态性。

例如，当它创建用于页面显示的数据时，Drupal 将寻找模块中名为`<modulename>_block()` 和 `<modulename>_view()` 的函数（其中 `<modulename>` 用被它检查过的每个模块的名字替换）。我们说，包含此类函数的模块实现了 `hook_block()` and `hook_view()` 钩子。

当 Drupal 找到这类函数时，将执行它们，并使用这些函数返回的数据构造发送给用户的响应。随后，Drupal继续进行它的一步步处理，过程中也许还会执行很多其它钩子。

当所有步骤都完成，并把响应发送给用户时，Drupal进行清理工作并退出。

提示：面向对象程序员该如何看待钩子。熟悉面向对象（OO）编程的人，如果把钩子看成与OO语言中的接口方法（或抽象方法）类似的机制，可能会有所帮助。钩子是 Drupal 将要在你的模块中查找的函数，在某种程度上，它甚至期待会有这样的函数。与接口方法类似，钩子的函数签名必须与 Drupal 期待的函数签名相匹配。不过，与接口不同，模块开发者可以选择（在某种程度上）实现哪些钩子，忽略哪些钩子。Drupal 并不要求定义的每个钩子都必须实现。

模块可以定义自己的钩子，让其它模块可以使用。采用这种方式，钩子机制可以被扩展，以提供复杂的定制行为。

当模块提供了一个与钩子签名匹配的函数时，我们说，这个模块实现了那个钩子。例如，假设 Drupal 有一个名为 `hook_example()` 的钩子。如果我们定义了一个叫做mymodule的模块，其中包含一个名为 `mymodule_example()` 的函数，我们就实现了 `hook_example()`。

下一章，我们将编写自己的第一个钩子实现。

### 主题（themes）###

处理能力并不是一切，特别是对于基于web的CMS来说。商业级别的CMS必须使网站设计者能够随心所欲地改变站点的外观风格。为此，Drupal 提供了健壮的主题系统。

Drupal的主题系统复杂程度令人吃惊。如同模块，主题系统的设计也允许扩展和改进，并采用钩子机制以允许进行此类扩展。

虽然底层的代码有一个很庞大（并且复杂）的API，但令人惊奇的是，顶层却没有那么复杂，并且以主题的概念为中心。

主题是一堆资源，包括PHP模板、CSS、JavaScript和图片，它为Drupal的某些或全部内容提供布局和风格信息。

在最简陋的情况下，主题可以只用几个文件组成——一个样式表、一个信息文件，以及几个图片。实际上，使用既有的Drupal主题，人们可以立刻创建出定制的主题。

不过，为了满足实现者的要求，主题可能会膨胀。自定义的模板，通常用 PHP 模板语言编写，可以指明 HTML 结构的细节。可以编写特殊的 PHP 文件，以覆写主题引擎的行为。也支持 JavaScript 和 CSS 的复杂配置。甚至可以用模块与主题系统进行交互。

简言之，按照实现者的意愿，主题既可以十分简单，也可以非常复杂。

第三章专门讲述主题，在那一章中，我们将首先创建一个简单的主题，然后逐步构建中等复杂程度的主题。

主题和模块是Drupal体系结构的关键成分，并且是本书的重点。不过，在继续探讨之前，让我们换个角度审视 Drupal。让我们简要了解一下，Drupal是如何处理内容的。

## Drupal 的关键概念 ##

本书是面向开发者的，为了不使本书过于庞大，有些介绍性的材料只能从简或省略。

要想全面了解Drupal 6，我推荐 David Mercer 编写的书《Building Powerful and Robust Websites with Drupal 6》，也是 Packt Publishing 出版的。

在本书中，我们假定读者已经有中等的Drupal使用经验，并能从容管理Drupal网站。

但是，Drupal的某些特殊方面还是值得介绍的。在本书中，我们将学习其中一些方面。其它的是Drupal的常用术语，当我们以开发者的眼光检视这些术语时，它们就具有了另外一层含义。

在本节中，我们重点关注对于本书来说非常关键的 Drupal 的概念。我们从最大的话题之一开始：节点。

### 节点 ###

Drupal是个内容管理框架。在这个语境中，我们所说的内容通常是指文本对象，比如新闻文章或blog条目。

这个一般的基于文本的内容的概念，被Drupal捕捉到，用术语 Node（节点）来描述。用 Drupal 的话来说，一个 Node（节点）就是代表文本内容的一个普通对象。

尽管节点是基于文本设计的，但一些社区贡献的多媒体模块扩充了节点系统，使它能处理非文本内容，比如图片或音频文件。

节点存储在数据库中，并按需存取。除了其它因素以外，所有的节点都具有：

* 一个唯一的节点ID（nid）
* 至少有一个版本ID（vid）用来跟踪版本修订
* 创建和修改日期，以及处置此节点的用户的身份信息
* 发布状态、节点的语言（和翻译）等元数据（Metadata）

除此之外，节点还必须有一个标题（title）和正文（contents）。（管理员和开发者可以选择关闭标题或正文，不过数据库中始终为它们保留着位置）。

在Drupal中，节点用于支撑许多不同种类的文本内容。为了理解这一点，让我们简单看看创建新内容的过程。

默认情况下，在Drupal中创建新内容是通过单击主导航区的“Create Content”链接进行的。在这个页面中，提示用户为他们的新页面选择内容类型：

![插图 1-3](https://raw.github.com/playts/Learning-Drupal-6-Module-Development/master/images/1-3.jpg)

插图 1-3

上面的截图中显示出三种不同的可用内容类型。

Story和Page内容类型是默认包含的。Quotes内容类型是我们将在本书中创建的。

在第四章中，我们将创建 Quotes 内容类型。第七章中，我们将扩展这个节点对象，创建代表传记的更为精细的内容类型。

实际上，所有的三种内容类型都是基于文本的，而且每一种都是用节点实现的。为了实用目的，节点是Drupal内容管理系统的心脏。

在本书中，我们将多次与节点打交道，我们将详细了解节点API。

**评论不是节点**

尽管大多数类似于文章的内容都是基于节点的，有一种文本成分却是个例外——那就是评论（comment）。评论通常是做为一种用户反馈机制实现的，是附加在故事（story）、页面（page）、blog 条目（entry）和文章上的。例如，当你创建一个新的页面时，你有机会选择允许或禁止用户评论。如果评论是启用的，处于可读写状态，用户将能够对文章进行评论。

下面是评论张贴页面的一个例子：

![插图 1-4](https://raw.github.com/playts/Learning-Drupal-6-Module-Development/master/images/1-4.jpg)

插图 1-4

评论与节点扮演不同的角色。例如，评论总是与一个节点联系在一起。

虽然本书中对评论没有详细论述，它们却演示了一个要点：Drupal的体系结构非常灵活，可以适应不同的扩展（比如评论），即使这些扩展并非典型的文本内容“模式”，也并不使用节点API。

提示：因为评论在很多方面与节点很相似，Drupal开发人员曾讨论是否在Drupal 7 中把评论转变到节点框架。

虽然通过创建一个不使用节点的函数库，有可能实现新的内容类型，但是通常在已有的（经过测试的、健壮的）节点API的基础上构建新类型效率更高。

### 用户 ###

在Drupal中，另一种重要的对象类型是用户（user）。用户记录是用这种对象类型维护的。与评论和节点类似，用户数据也存储在数据库中，处理过程中可以从中读取。

有关用户的信息主要用于认证、确定用户偏好和许可权、日志记录等。

在本书中，我们将使用 user API 执行许可权检查、获取联系信息、获悉用户偏好等。

**访问权限与安全性**

许可权与用户对象联系密切。 Drupal提供了一种基于角色的机制，许可权是授予用户集合的。简言之，用户属于某个角色，许可权被授予角色（或者收回）。

因此，当检查对某个资源的访问权限时，Drupal装入用户对象，找出用户的角色，然后找到角色的权限。

这样看起来是不是要做很多工作？不过，这并不是模块开发者必须做的工作。Drupal提供了用于权限检测的函数。多数时候，模块代码确定许可权时，并不需要直接确定用户的角色。user API 为我们做了那些工作。

### 区块和页面渲染 ###

同样重要的术语还有区块（block）。节点用于存储和表现文章以及“大块”的内容，而区块则用于表现少量的内容。例如，导航菜单、每日提示、调查等，搜索框也常常用区块来显示。

区块不是一种内容类型。实际上，它是一种抽象单元（占位符），主要用于显示其它内容。管理员可以使用区块编辑器，确定区块在主题化了的页面上的显示位置：

![插图 1-5](https://raw.github.com/playts/Learning-Drupal-6-Module-Development/master/images/1-5.jpg)

插图 1-5

上面截图中的高亮区域表示了区块可以被显示的位置。

从开发者的角度来看，区块是模块编写的一个很重要的组成部分。

实际上，我们的第一个模块（下一章中我们将要创建的）将显示一个区块。

在模块中定义区块涉及到选择要显示的内容，然后把它传递给适当的格式化工具。

在第三、第四章中，我们将学习主题，那时我们将对区块内容进行格式化处理。

### 菜单 ###

与区块密切相关的是菜单。Drupal的菜单系统很复杂，其主要目的是构造导航菜单。例如，上面的截屏中显示了主菜单，其中的项目包括Code review, My account, Create content 等等。这个菜单是由Drupal的菜单系统动态生成的。

但是 Drupal的菜单系统远比这类的简单描述复杂得多。它还是把 URL 映射到特定处理例程的主要工具。使用菜单 API，开发人员可以把路径与特别定义的函数联系起来。

在第五章中，我们将使用菜单系统创建一个 JSON 服务 (JavaScript Over the Network)，在第六章中，我们将学习把路径映射到模块的更加传统的方法。

### 表单 ###

在Web上提交内容的主要方法是通过 HTML 表单（Forms）。虽然无处不在的表单令 web 用户的生活更轻松，但表单处理工具的缺乏，却使得表单开发成为程序员感到最无趣、最乏味的琐碎工作。

但是，表单处理却是 Drupal 最杰出的领域之一。表单API（FAPI）提供的编程接口，把开发者从表单开发的痛苦中解脱出来（至少是极大地减轻了这种痛苦）。

使用 FAPI，开发者只是提供一个表单定义，而让Drupal去完成构建和显示表单、收集结果、验证数据有效性以及对表单数据的转义操作。Drupal甚至提供了表单缓存和高级AHAH(Asynchronous HTML And HTTP)特性。

随着 Drupal 开发的进展，表单API变得越来越好，Drupal 6 中展示了很多的改进。

第六章中第一次明确地介绍了表单API，第七章中再次使用了它。

### 数据库和 Schema API ###

这么多高层框架和API的下面，是负责管理和操纵数据库的底层。Drupal提供了低层级的数据库API以简化编写SQL查询的过程。

此 API为数据库查询提供了一定程度的安全性，也使得编写可在不同数据库间移植的SQL更容易。

另外还有新的 Schema API，这是在 Drupal 6 中引入的，这使得不必编写实际的SQL即可定义数据库的组织方式。因为不同的数据库使用不同的结构定义表格，这个API简化了可移植模块项目的编写。

这些API主要是在第七章中讨论的。

本书还将介绍 Drupal 的其它一些方面，包括分类（有时也叫类别）、过滤器、以及动作。但并没有深入讨论它们。要想了解更多，可以参考 Drupal 手册：http://drupal.org/handbooks.

提示：第八章和第九章将在模块中使用过滤器和动作。

## 开发工具 ##

目前，我们已经介绍了Drupal开发中涉及的基本概念。完成本章之前，我们把焦点转向开发工具。

有几个Drupal专用的工具，开发自己的模块时，你可能会觉得有用。这些工具本身就是由两个模块提供的，都可以从Drupal的网站上下载。

**Devel 模块**

Devel模块提供了几个工具，对于Drupal开发特别有用，包括缓存管理、SQL调试工具、调查工具、模块重装器、、API参考工具，还有其它很多。

在官方网站上，你可以找到有关这个模块的更多信息：http://drupal.org/project/devel.

这个模块（Devel 模块）的主要部分在一个区块的项目中提供了这些工具。安装了这个模块以后，你需要导航到 Administer | Site building | Modules 启用模块，然后导航到 Administer | Site building | Blocks 告诉 Drupal 在哪里显示新内容。

这个模块还包含了构造主题的工具，一个宏生成器用来仿真表单数据项，以及一个生成测试数据的工具。随着这个模块的不断开发，还会添加更多新特性。

任何严肃的模块开发者都会安装这个模块。在编写本书过程中，它是重新安装模块、清空缓存以及调试困难代码的有力工具。

**Coder 模块**

我们将在本书中看到，Drupal开发者在代码中坚守严格的规范。Coder模块的设计目标是帮助开发者定位和修改不符合规范的代码。

除了保证代码符合规范以外，它还对文本的处理方式进行基本的安全审核。这可以用来发现错误以防它们成为安全隐患。

Coder 模块也位于 Drupal 官方网站上：http://drupal.org/project/coder.

虽然不象Devel模块那样可以提高编程效率，但Coder可以帮你生成干净的、“durpal化”（Drupalish）的代码。它严格的语法检查有时也可以帮你找到bug。

提示："Drupalish"（Drupal化）Drupal开发者喜欢用Drupalish这个词，指代符合Drupal哲学的原则、风格和方法。例如，Drupal化的代码遵循编码原则，并使用Drupal中通用的数据结构（例如嵌套的关联数组）。

除这些模块外，Druapl网站上还有关于如何为Drupal开发配置你喜欢的开发环境（包括Emacs, VI, FireBug, 和 Eclipse PDT）的丰富的信息：http://drupal.org/node/147789.

## 谈谈我们的演示站点 ##

因为本书的重点是开发，我们没有讲述标准的下载、安装、配置Drupal的过程。如果你想回顾这些信息，Drupal的站点 http://drupal.org 上有一本完整的安装手册。我们假设Drupal已经被正确地安装和配置了。

在本书中，我们将为一个虚构的站点 Philosophers Bios 开发模块。这个站点提供著名哲学家的新闻和传记速写。本书中，我们开发的大部分模块都将考虑到那样一个站点所需要的功能。

虽然是针对这个站点开发的，我们开发的模块可以广泛应用于其它站点，并且考虑到了我们通常为Drupal开发的各种现实世界的真正应用程序。

我已经尽力开发出独特的模块（不再重新发明轮子）。但是，对于这样一个流行而且成熟的平台，我也许不可避免地重复了其它人已经做的工作。不过，本书中讲述的模块，主要目的是提供有教育意义的 Drupal 模块的实际例子。

## 小结 ##

本章是Drupal的体系结构的简介。我们以开发者的视点介绍了Dupal的基本结构。此后，我们学习了一些对本书来说比较重要的概念和系统。

现在这个基础章节结束了，我们的重点将转向开发。以后不会再有充满理论和高层次解释的章节。从现在开始，我们把重点转向实际开发。

在下一章中，我们将构建第一模块——不，那不是一个普普通通的 "Hello, World" 模块。我们将使用远程的基于 XML 的API取回内容，并把它显示成一个Drupal区块。动起手来，让我们开始编码吧。
